---
title: "Chapter 9"
author: Leonhard Reiter
format: 
  html:
    theme: cosmo
    html-table-processing: none
    html-math-method: katex
    self-contained: true
    toc: true
    toc-depth: 3
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| label: Set up
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: packages

library(janitor)
library(knitr)
library(lubridate)
library(modelsummary)
library(opendatatoronto)
library(pdftools)
library(pointblank)
library(readxl)
library(scales)
library(stringi)
library(testthat)
library(tidyverse)
library(validate)
library(cowplot)
library(ThemePark)

theme_set(
  theme_barbie()
)
```

```{r}
#| label: sim data

set.seed(420)
sim_d <-  
  tibble(
  state = state.name,
  pop = runif(n = 50, min = 0, max = 50) |> 
    round(digits = 2)
)

unedited_data <-
  c("Alabama 5 Alaska 0.7 Arizona 7 Arkansas 3 California 40")

d_clean # <- 
tibble(raw = unedited_data) |> 
  separate(
    col = raw,
    into = letters[1:5],
    sep = "(?<=[[:digit:]]) " # A bracket preceded by numbers
  ) |>
  pivot_longer(
    cols = letters[1:5],
    names_to = "drop_me",
    values_to = "separate_me"
  ) |>
  separate(
    col = separate_me,
    into = c("state", "population"),
    sep = " (?=[[:digit:]])" # A space followed by a number
  ) |>
  mutate(state = fct(state),
         population = as.numeric(population)) |> 
  select(-drop_me)
```

```{r}
messy_string <- paste(
  c("Patricia, Ptricia, PatricIa, Patric1a, PatricIa"),
  c("PatrIcia, Patricia, Patricia, Patricia , 8atricia"),
  sep = ", "
)

messy_tib <- 
tibble(names = messy_string) |> 
  separate_rows(names, sep = ", ")

messy_tib |> count(names, sort = T)

messy_clean <-
  messy_tib |>
  mutate(
    names = str_to_title(names),
    names = str_replace_all(names, "8atricia", "Patricia"),
    names = str_replace_all(names, "Ptricia", "Patricia"),
    names = str_replace_all(names, "Patric1a", "Patricia"),
    names = str_trim(names, side = c("right"))
  )

messy_clean |> count( names, sort = T)

check_me <-
  messy_clean |>
  filter(names != "Patricia")

if (nrow(check_me) > 0) {
  print("Patricia is still written wrong somewhere")
} else if (nrow(check_me) == 0) {
  print("u good")
}

stopifnot(nrow(check_me) == 0)
```

```{r}
youth_survey_data <-
  tibble(ages = c(
    15.9, 14.9, 16.6, 15.8, 16.7, 17.9, 12.6, 11.5, 16.2, 19.5, 150
  ))

youth_survey_data |>
  ggplot(aes(x = ages)) +
  geom_histogram(binwidth = 1, fill = barbie_theme_colors[4], col = "black") +
  labs(
    x = "Age of respondent",
    y = "Number of respondents"
  )

youth_survey_data_fixed <- youth_survey_data |> 
  mutate(ages = if_else(ages > 20, ages/10, ages))

youth_survey_data_fixed |>
  ggplot(aes(x = ages)) +
  geom_histogram(binwidth = 1,
                 col = "black",
                 fill = barbie_theme_colors[4]) +
  labs(
    x = "Age of respondent",
    y = "Number of respondents"
  ) +
  scale_x_continuous(n.breaks = nrow(youth_survey_data_fixed))

australian_names_data <-
  tibble(
    country = c(
      "Australie", "Austrelia", "Australie", "Australie", "Aeustralia",
      "Austraia", "Australia", "Australia", "Australia", "Australia"
    )
  )

australian_names_data |>
  count(country, sort = TRUE)


```

### Validate (my feelings)
```{r}
set.seed(99)
n <- 1000

d_issues <- 
  tibble(age = c(
      runif(n = n, min = 0, max = 120) |> round(),
      1000
    ),
    
    gender = c(sample(x = c("male", "female", "other","Prefer not to say"),
                    size = n,
                    replace = T,
                    prob = c(0.4,0.4,0.1,0.1)), "tasmania"),
    income = rexp(n+1, rate = 0.10) |> round() |> as.character()
    )
```

```{r}
rules <- validator(
  is.numeric(age),
  is.character(gender),
  is.numeric(income),
  age < 120,
  gender %in% c("female", "male", "other", "prefer not to disclose"))

out <- confront(d_issues, rules)
summary(out)
```

```{r}
simulated_class_data <-
  tibble(
    response = c(1, 1, 0, 1, 0, 1, 1, 0, 0),
    group = c(1, 2, 1, 1, 2, 3, 1, 2, 3)
  ) |>
  mutate(
    group_as_integer = as.integer(group),
    group_as_factor = as.factor(group),
  )

models <- list(
  "Group as integer" = glm(
    response ~ group_as_integer,
    data = simulated_class_data,
    family = "binomial"
  ),
  "Group as factor" = glm(
    response ~ group_as_factor,
    data = simulated_class_data,
    family = "binomial"
  )
)
modelsummary(models)
```

